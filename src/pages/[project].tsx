import Head from 'next/head'
import { useRouter } from 'next/router';
import { RefObject, useEffect, useMemo, useRef, useState } from 'react';
// import Image from 'next/image'
import Marquee from "react-fast-marquee";
import Spline from '@splinetool/react-spline';
import { fetchAPI } from '@/api/api';
import Section from '@/components/section';

  const projects = {
    'olimaps': {
      name: 'olimaps',
      color: '#FF0054',
      secondaryColor: '#400015',
      stack: 'VUE.JS // REACT // POSTGRESQL // THREE.JS // NODE.JS // PRISMA // GRAPHQL // FIREFASE // AWS //'
    },
    'pantala': {
      name: 'pantala',
      color: '#1c1c1c',
      secondaryColor: '#FEFEFE',
      stack: 'STACK // STACK // STACK // STACK // STACK // STACK // STACK // STACK // STACK // STACK //'
    },
    'kanuki': {
      name: 'kanuki',
      color: '#0054ff',
      secondaryColor: '#400015',
      stack: 'STACK // STACK // STACK // STACK // STACK // STACK // STACK // STACK // STACK // STACK //'
  },
}

type Params = {
  params: {
    project: String
  }
}

export async function getStaticPaths() {
    const [projectsRes] = await Promise.all([
      fetchAPI("/projects", { populate: {
        logo: {
          populate: {
            logo: "*",
          },
        },
        content: {
          populate: "*",
        },
        technologies: {
          populate: {
            icon: "*"
          }
        }
      } })
    ])
    console.log("CONTENT", projectsRes.data[0].attributes.content)

    return {
      paths: projectsRes.data.map((project: unknown) => ({
        params: {
          project: project.attributes.title.replaceAll(" ", "").toLowerCase(),
          content: project.attributes
        }
      })),
      fallback: false, // can also be true or 'blocking'
    }
  }

  export async function getStaticProps({params}: Params): Promise<{
    // Passed to the page component as props
    props: { project: any, color: String, backgroundColor: String }
  }> {

    const projectsRes =
      await fetchAPI("/projects", { 
        filters: {
          title: params.project[0].toUpperCase() + params.project.substring(1)
        },
        populate: {
        logo: {
          populate: {
            logo: "*",
          },
        },
        content: {
          populate: "*",
        },
        technologies: {
          populate: {
            icon: "*"
          }
        }
      } })
    


    return {
  
      // Passed to the page component as props
      props: { project: projectsRes.data[0].attributes, color: projectsRes.data[0].attributes.secondaryColor, backgroundColor: projectsRes.data[0].attributes.color }
    }
  }

export default function Home({project, color, backgroundColor, ...params}) {

  const router = useRouter() 
  const nextProject = useRef(null)
  const scrollarea = useRef(null)
  const [fullWidth, setFullWidth] = useState(false)
  const [tvEnabled, setTvEnabled] = useState(true)
  const [tvEffect, setTvEffect] = useState({
    background: `repeating-radial-gradient(#000 0 0.0001%,#FFF 0 0.0002%) 50% 0/2500px 2500px, repeating-conic-gradient(#000 0 0.0001%,#FFF 0 0.0002%) 60% 60%/2500px 2500px`,
    backgroundBlendMode: "difference",
    animation: "b .2s infinite alternate"
  })


  useEffect(() => {
    setTvEnabled(false)
    scrollarea.current.scrollTo(0, 0)
    setTvEffect({
      background: `repeating-radial-gradient(${backgroundColor} 0 0.0001%,${color} 0 0.0002%) 50% 0/2500px 2500px, repeating-conic-gradient(${backgroundColor} 0 0.0001%,${color} 0 0.0002%) 60% 60%/2500px 2500px`,
      backgroundBlendMode: "difference",
      animation: "b .2s infinite alternate"
    })

    setTimeout(() => {
      setTvEnabled(false)
    }, 2000)

  }, [router.asPath])


  const handleScroll = (event) => {
    const height = event.currentTarget.clientHeight;
    const barHeight = event.currentTarget.scrollHeight;
    const scrollTop = event.currentTarget.scrollTop;

    if (height + scrollTop > barHeight - (nextProject.current.clientHeight/2)) {
      setFullWidth(true)
    } else {
      setFullWidth(false)
    }
    
  };

  const textRotation = {
    transformOrigin: "bottom right",
    transform: "rotate(-90deg)",
    position: "absolute",
    top: 0,
    right: 0,
    fontSize: "2em"
  }

  const [content, setContent] = useState({})

  let actualItem = null;
  project.content.forEach((item: any) => {
    if (item.hasOwnProperty("name")) {
      content[item.name] = {}
      actualItem = content[item.name];
    } else {
      actualItem[
        item.__component.substr(item.__component.indexOf(".") + 1)
      ] = item;
    }
  });
  

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main ref={scrollarea} className='overflow-y-scroll h-full' style={{ color: color }} onScroll={handleScroll}>
        <div className='grid grid-cols-8 grid-rows-6 h-full'>
          <div className='relative row-start-1 row-end-5 col-start-1 col-end-7 border-r-8' style={{ borderColor: color }}>
            {
              tvEnabled ? <div className='w-full h-full' style={tvEffect}></div> : <Spline scene="https://prod.spline.design/QkgvGiVJhiLv8w2x/scene.splinecode" />
            }
          </div>
          <div className='row-start-1 row-end-5 col-start-7 col-end-9 overflow-hidden'>
            <div className='p-6'>
              <div className='highlight text-xl'>HIGHLIGHT 1</div>
            </div>
            <div className='p-6'>
              <div className='highlight text-xl'>HIGHLIGHT 1</div>
            </div>
            <div className='p-6'>
              <div className='highlight text-xl'>HIGHLIGHT 1</div>
            </div>
          </div>
          <div className='row-start-5 row-end-7 col-start-1 col-end-9 border-y-8' style={{ borderColor: color }}>
            <div className='h-1/3 border-b-8' style={{ borderColor: color }}>
            <Marquee className='marquee' gradient={false} speed={40} style={{fontSize: '56px'}}>{project.stack}</Marquee>
            </div>
            <div className='h-2/3 pl-10 flex items-center' style={{ borderColor: color }} >
              <h1 className='project-title overflow-y-hidden text-9xl font-black uppercase flex'>
                {
                project.title.split("").map((char: String) => (<div className='title-char'>{char}</div>))
                }
              </h1>
            </div>
          </div>
        </div>
        {
          Object.entries(content).map((section) => {
            return (
              <div className="flex">
                <div className="relative border-8 -ml-4 -mt-2 w-20 mh-40" style={{borderColor: color}}>
                    <h2 className="text-xl font-black uppercase" style={{color, ...textRotation}}>{section[0]}</h2>
                </div>
                <section className='pl-10 py-10'>
                  <Section section={section[1]} color={color} backgroundColor={backgroundColor}></Section>
                </section>
              </div>
            )
          })
        }
        <div ref={nextProject} className='relative'>
          <div className='border-y-8' style={{ borderColor: color }}>
            <Marquee className='marquee' gradient={false} speed={40} style={{fontSize: '56px'}}>NEXT PROJECT -- NEXT PROJECT -- NEXT PROJECT -- NEXT PROJECT -- NEXT PROJECT -- NEXT PROJECT --</Marquee>
          </div>
          <div className='pl-10 flex items-center' style={{ borderColor: color }} >
            <span className='overflow-y-hidden text-9xl font-black uppercase flex'>
              {
                project.title
              }
            </span>
          </div>
          <div className={`absolute z-10 left-0 top-2 bottom-0 ${fullWidth ? 'w-full' : 'w-0'}`} style={{backdropFilter: 'invert(1)', transition: 'width 5s ease-in'}}></div>
        </div>

      </main>
    </>
  )
}
