import Head from 'next/head'
import { useRouter } from 'next/router';
import { RefObject, useEffect, useMemo, useRef, useState } from 'react';
// import Image from 'next/image'
import Marquee from "react-fast-marquee";
import Spline from '@splinetool/react-spline';
import { fetchAPI } from '@/api/api';
import Section from '@/components/section';

import { gsap } from "gsap";
import Assistant from '@/components/assistant';

type Params = {
  params: {
    project: String,
  }
}

  export async function getStaticProps({params}: Params): Promise<{
    // Passed to the page component as props
    props: { project: any, categories: any, color: String, backgroundColor: String }
  }> {
    
    const [projectsRes, assistantRes] = await Promise.all([
      fetchAPI("/landing", { populate: {
          highlights: {
            populate: "*"
          }
        }
      }),
      fetchAPI("/assistant", { populate: {
        categories: {
          populate: {
            highlights: "*",
            recommendations: "*"
          }
        }
      }})
    ])
      

    return {
  
      // Passed to the page component as props
      props: { 
        project: projectsRes.data.attributes, 
        categories:  assistantRes.data.attributes.categories,
        color: projectsRes.data.attributes.color, 
        backgroundColor: projectsRes.data.attributes.backgroundColor 
      }
    }
  }

export default function Home({project, categories, color, backgroundColor, onTransition, setTransition, ...params}) {
  const [highlights, setHighlights] = useState([
    {highlight: "HIGHLIGHT 1"}, {highlight: "HIGHLIGHT 2"}
  ])
  
  const router = useRouter() 
  const [tvEffect, setTvEffect] = useState({
    background: `repeating-radial-gradient(#000 0 0.0001%,#FFF 0 0.0002%) 50% 0/2500px 2500px, repeating-conic-gradient(#000 0 0.0001%,#FFF 0 0.0002%) 60% 60%/2500px 2500px`,
    backgroundBlendMode: "difference",
    animation: "b .2s infinite alternate"
  })

  useEffect(() => {
    setTvEffect({
      background: `repeating-radial-gradient(${backgroundColor} 0 0.0001%,${color} 0 0.0002%) 50% 0/2500px 2500px, repeating-conic-gradient(${backgroundColor} 0 0.0001%,${color} 0 0.0002%) 60% 60%/2500px 2500px`,
      backgroundBlendMode: "difference",
      animation: "b .2s infinite alternate"
    })

    setTimeout(() => {
      setTransition(false)
    }, 1000)

  }, [router.asPath])

  let fullWidth = false
  const handleScroll = (event) => {
    const height = event.currentTarget.clientHeight;
    const barHeight = event.currentTarget.scrollHeight;
    const scrollTop = event.currentTarget.scrollTop;
    
  };

  const textRotation = {
    transformOrigin: "bottom right",
    transform: "rotate(-90deg)",
    position: "absolute",
    top: 0, right: 0,
    // position: "sticky",
    // top: 184,
    fontSize: "2em"
  }

  const [content, setContent] = useState({})
  
  function highlightsUpdate(highlights) {
    console.log("HIGHLIGHTS RECEIVED", highlights);
    setHighlights(highlights)
  }

  return (
    <> 
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='h-full' style={{ color: color}} onScroll={handleScroll}>
        <div className='grid grid-cols-8 grid-rows-6 h-full'>
          <div className='relative row-start-1 row-end-5 col-start-1 col-end-7 border-r-8' style={{ borderColor: color }}>
            {
              onTransition ? <div className='w-full h-full' style={tvEffect}></div> : <Assistant categories={categories} highlightsUpdate={highlightsUpdate}></Assistant>
            }
          </div>
          <div className='row-start-1 row-end-5 col-start-7 col-end-9 overflow-hidden'>
            {
              highlights.map(({highlight}) => {
                return (
                  <div className='p-6'>
                    <div className='highlight text-xl'>{highlight.toUpperCase()}</div>
                  </div>
                )
              })
            }
          </div>
          <div className='row-start-5 row-end-7 col-start-1 col-end-9 border-y-8' style={{ borderColor: color }}>
            <div className='h-1/3 border-b-8' style={{ borderColor: color }}>
            <Marquee className='marquee' gradient={false} speed={40} pauseOnHover={true} style={{color: backgroundColor, backgroundColor: color, fontSize: '56px'}}>{onTransition ? "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////" : project.marquee}</Marquee>
            </div>
            <div className='h-2/3 pl-10 flex items-center' style={{ borderColor: color }} >
              <h1 className='project-title overflow-y-hidden text-7xl font-black uppercase flex'>
                {
                "FULL STACK DEVELOPER".split("").map((char: String) => (<div className='title-char'>{char}</div>))
                }
              </h1>
            </div>
          </div>
        </div>

      </main>
    </>
  )
}
